name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.6'
          cache: true  # Use Go cache to speed up the pipeline

      - name: Install dependencies
        run: go mod tidy

      #  Linting with golangci-lint (replace the manual installation)
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m
          only-new-issues: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

      #  Check code formatting
      - name: Check code formatting
        run: |
          if [ -n "$(gofmt -l .)" ]; then 
            echo "Code is not formatted. Run 'go fmt ./...'"; 
            exit 1; 
          fi

      #  Security analysis with gosec
      - name: Run gosec
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec ./...

      #  Vulnerability check with govulncheck
      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      #  Static analysis with Staticcheck
      - name: Run Staticcheck
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...

      #  Check for unhandled errors with errcheck
      - name: Run errcheck
        run: |
          go install github.com/kisielk/errcheck@latest
          errcheck ./...

      #  Run tests with race detector
      - name: Run tests with race detector
        run: go test -race ./...

  docker:
    needs: test  # Build the Docker image only if the tests pass
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t terralambda .

      - name: Run Docker tests
        run: |
          docker run --rm \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            terralambda test 

      #  Scan the Docker image for vulnerabilities
      - name: Scan Docker image for vulnerabilities
        run: |
          docker run --rm aquasec/trivy image terralambda
