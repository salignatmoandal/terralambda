name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true  # Utilisation du cache Go pour acc√©l√©rer le pipeline

      - name: Install dependencies
        run: go mod tidy

      # üîç Linting avec golangci-lint (remplace l‚Äôinstallation manuelle)
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m
          only-new-issues: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # üîç V√©rification du format du code
      - name: Check code formatting
        run: |
          if [ -n "$(gofmt -l .)" ]; then 
            echo "Code is not formatted. Run 'go fmt ./...'"; 
            exit 1; 
          fi

      # üîí Analyse de s√©curit√© avec gosec
      - name: Run gosec
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec ./...

      # üîí V√©rification des vuln√©rabilit√©s avec govulncheck
      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      # üîç Analyse statique avec Staticcheck
      - name: Run Staticcheck
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...

      # ‚ö†Ô∏è V√©rification des erreurs non g√©r√©es avec errcheck
      - name: Run errcheck
        run: |
          go install github.com/kisielk/errcheck@latest
          errcheck ./...

      # ‚úÖ Ex√©cution des tests avec le d√©tecteur de race condition
      - name: Run tests with race detector
        run: go test -race ./...

  docker:
    needs: test  # Ne construit l'image Docker que si les tests passent
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t terralambda .

      - name: Run Docker tests
        run: |
          docker run --rm \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            terralambda test 

      # üîí Optionnel : Scan de l'image Docker pour d√©tecter les vuln√©rabilit√©s
      - name: Scan Docker image for vulnerabilities
        run: |
          docker run --rm aquasec/trivy image terralambda
